Shell Script基础——————————————————————————————————————————————————

什么是Shell脚本？
Shell脚本(shell script)是包含一系列shell命令的文本文件，用于自动化执行任务。
平常在终端中输入的命令，比如：
cd /CS216/Labs
mkdir Lab1
touch Lab1/file.txt
这些命令可以写进一个 .sh 文件里，它会作为一个脚本，自动依次执行里面的命令

简单示例：
创建一个名为 setup.sh 的文件：
#!/bin/bash
echo "开始设置项目环境"
mkdir -p project/src project/bin
cd project
touch src/main.cpp
echo "项目结构创建完成"
ls -la

使其可执行并运行：
chmod +x setup.sh
./setup.sh

shell提示符下输入的任何命令都可包含在脚本中，例如：
    实用程序Utility
    已编译的程序Compiled Program
    另一个shell脚本
    流程控制命令Control flow commands
shell脚本名不能和Unix命令冲突

运行shell脚本————————————————————————————————————————————————
运行shell脚本有三个步骤：
1：先让文件可执行，给文件添加执行权限
    chmod u+x filename
2：执行文件，使用./运行指定文件
    ./filename
3：shell解释器会逐条执行命令

编写shell脚本————————————————————————————————————————————————
shell脚本的第一行放置特殊字符，告诉系统在执行前检查文件类型，以及使用什么工具来执行脚本
shell脚本的前两个字符是 #!(shebang或hashbang)，然后跟着应该执行脚本的程序的绝对路径名
示例：
#!/bin/bash
echo "Hello, world!"

Shell参数和变量——————————————————————————————————————————————
Shell变量由字母，数字和下划线组成
    环境变量environment variables用大写
    用户定义变量User defined variables用小写
    关键字Shell变量Keyword shell variables对shell有特殊含义，由启动文件创建和初始化

位置参数Positional parameters：
    允许访问命令行参数
    向函数传递参数

特殊参数Special parameters，例如：
    最后命令的名称
    最近执行命令的状态
    命令行参数的数量

内置Shell环境变量————————————————————————————————————————————
PATH 命令搜索路径search path for commands
PS1 主命令提示符字符串primary command prompt string
SHELL shell的完整路径名 full pathname for the shell
HISTSIZE 命令历史中保存的行数 number of lines kept in the command history
RANDOM 0到2^15 -1之间的随机数

用户定义变量—————————————————————————————————————————————————
定义变量：
    变量名=值
定义变量的等号两侧不能有空格
比如 num=10 或者 name="Anthony Wang"

    变量访问和引号————————————————
访问变量值需要在变量名前加 $ 符号，比如：
    abc=100
    echo $abc    # 输出: 100
    echo abc     # 输出: abc (字面字符串)

双引号""和单引号''的区别：
    双引号: 允许变量扩展和命令替换
        echo "Value is $abc"  # 输出: Value is 100
    单引号: 按字面意思处理，不进行任何扩展
        echo 'Value is $abc'  # 输出: Value is $abc
双引号的主要用处是避免空格分割和保护特殊字符

算数扩展——————————————————————————————————————————————————————
shell中的变量运算方式和C++不同，shell是一个以字符串为主的语言，它默认不会做数学运算，比如写：
    number=100
    number=number-1
那么shell会理解成"number先被赋值为100，然后又被赋值为"number-1"这个字符串，而不是99
想要实现 number-- 一样的代码，需要写成：
    number=$((number-1))
这里的两层括号的意义是在括号内执行运算或条件，而 $(()) 代表计算表达式并将数值返回给变量
在双括号中不需要使用 $ 访问变量值，不过如果是位置参数的话就需要使用 $，比如：
    number=$((number + $2)) 代表number = number自己 + 位置参数$2

幂计算使用 **，比如：
    MAX=$((2**8))，即2的8次方

位置参数(Positional Parameters)——————————————————————————————————
shell脚本可以接受命令行参数，这些参数通过位置参数访问：
    $0 - 脚本文件名
    $1, $2, $3... - 第1个、第2个、第3个参数
    $# - 参数个数
    $@ - 所有参数(作为单独的单词)
    $* - 所有参数(作为一个单词)
    $? - 上一个命令的退出状态码(exit status)

示例脚本：
#!/bin/bash
echo "脚本名: $0"
echo "第一个参数: $1"
echo "第二个参数: $2"
echo "参数总数: $#"
echo "所有参数: $@"

运行: ./script.sh hello world
输出:
脚本名: ./script.sh
第一个参数: hello
第二个参数: world
参数总数: 2
所有参数: hello world

命令替换(Command Substitution)————————————————————————————————
可以将命令的输出结果赋值给变量，有两种语法：
    1. $(command) - 推荐语法
    2. `command` - 传统语法(反引号)

示例：
    current_date=$(date)
    file_count=$(ls | wc -l)
    echo "当前日期: $current_date"
    echo "文件数量: $file_count"

Shell脚本调试技巧————————————————————————————————————————————
1. 使用 -x 选项进行调试：
   bash -x script.sh  # 显示每行命令的执行过程

2. 在脚本中添加调试语句：
   set -x  # 开启调试模式
   set +x  # 关闭调试模式

3. 检查语法错误：
   bash -n script.sh  # 只检查语法，不执行

4. 使用 echo 语句输出变量值进行调试：
   echo "DEBUG: 变量值为 $variable"

常见错误和注意事项————————————————————————————————————————————
1. 等号两侧不能有空格：
   正确: name="John"
   错误: name = "John"

2. 访问变量时要加 $ 符号：
   正确: echo $name
   错误: echo name

3. 文件权限问题：
   记得给脚本添加执行权限: chmod +x script.sh

4. 路径问题：
   使用相对路径时要注意当前工作目录
   推荐使用绝对路径或者 $PWD 变量
