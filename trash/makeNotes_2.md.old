Makefile的宏Macro——————————————————————————————————————————
宏本质上时Makefile中使用的简写或别名
宏可以表示Makefile的文本，这能简化输入或者快速更改Makefile的行为

宏的赋值格式为：
    MACRONAME = macro value
宏的变量名通常都是全大写

宏的使用示例————————————————————
EXEC = Project1
OBJS = PA1.o imdb.o
CC = /usr/bin/g++

$(EXEC) : $(OBJS)           = Project1 : PA1.o imdb.o
    $(CC) $(OBJS) -o $@     = g++ -o PA1.o imdb.o
PA1.o : PA1.cpp             
    $(CC) -c $^             = g++ -c PA1.cpp
imdb.o : imdb.cpp imdb.h    
    $(CC) -c $<             = g++ -c imdb.cpp
clean :
    rm -i *.o $(EXEC)       = rm -i *.o Project1

Makefile的其他语法————————————————————————————————————————————
Makefile一样可以使用#来添加注释

如果一行太长，可以在第一行的结尾放一个\，这样下一行也会被视为同一行

Makefile的调用Invoking————————————————————————————————————————
如果要调用make命令，确保描述文件(makefile本身)被命名为 makefile 或 Makefile
并且文件和源文件在相同位置（这样的话不需要表明文件路径）

基本调用方法————————————————————
make（构建文件的第一个目标，默认目标）
make target（构建指定的目标）
    重要选项：
        -n 不执行命令，只是列出要执行的命令，通常用于调试
        -f file 使用指定的文件替换makefile

Makefile的Clean功能———————————————————————————————————————————

永远都建议在makefile中添加清理功能，它用于完全重构项目
清理目标没有依赖项，不然它会在依赖项改变时自动清理
clean目标是独立的，直接使用命令调用
基本的清理命令是：
clean :
    rm -i *.o core
这个命令用于清理所有.o文件和core文件，后者出现在程序崩溃时

更复杂的清理命令是：
clean :
    rm -i *.0
    rm -i 'find ./ -type f -executable'
这个命令用于清理所有.o文件，并且寻找所有可执行文件并删除它们

Makefile的推理规则Inference Rules—————————————————————————————
推理规则是一种通用化构建过程的方法，本质上是一种通配符表示法
百分号符号%用作通配符
示例：

    CC = /usr/bin/g++
    FLAG = -g -Wall
    %.o : %.cpp
        $(CC) $(FLAG) -c $^
这个规则表示所有.o文件都依赖于 同名 的.cpp文件
只要相应的.cpp文件被修改，那么这就能自动编译相对应的.o文件
这种方法的优势在于不需要为所有.o文件都编写规则

Makefile的宏修改——————————————————————————————————————————————
makefile可以替换旧宏来创建新宏,比如：

    SOURCE = main.cpp car.cpp vehicle.cpp
    OBJECTS = $(SOURCES:.cpp=.o)
这里代表 OBJECT 等同于 SOURCE，但所有.cpp都被替换为了.o，所以
    OBJECT = main.o car.o vehicle.o






















