make工具 make utility————————————————————————————————————————————

make工具是unix最早的工具之一，它用于编译包含多个组件的大型项目
在传统的编译情况下，如果要运行整个项目，就要把整个项目中的所有文件都编译一遍
但make工具能够做到只编译那些被修改过的文件，和那些依赖于已修改文件的变化的文件

正常的C++文件编译有以下部分：
1：编辑器Editor - 创建和修改文件
2：源文件Source File - 包含C++程序码的文件
3：编译器Compiler - 将C++程序码翻译成可供机器处理的机器码
4：库文件Library Files - 预编译的代码集合，它们和程序码组合成可执行程序
5：可执行程序Executable Program - 由库文件和程序码组合出来的机器码文件

在中大型项目中，通常一个项目会包含多个文件，每个文件之间又有着各自的依赖关系，
3那么每一次修改后再对文件进行编译命令就会很复杂，且会耗费多余时间去重复编译
那些实际上根本没有被修改的文件

在通常的情况下，如果有多个文件，那么我们编译代码的命令通常是：
    g++ file1.cpp file2.cpp file3.cpp ..... -o outputfile
这个命令实际上包含了两个步骤：
    1：编译Complitation：
        首先，g++对每个.cpp文件进行了预处理和编译，将它转换为了机器码，让机器可以直接运行
        这个过程会生成 目标文件Object File，如果单独处理，file1.cpp会生成file1.o，而
        file2.cpp会生成file2.o，这些目标文件包含了源文件的机器码，并且会包含未解决
        的引用，比如file1实际上引用了来自file2的函数
        但这些文件是临时生成的，它们在下一个步骤结束以后就会被删除，只会留下最终文件：
    2：链接Linking：
        在所有源文件都被编译成目标文件后，链接器Linker 会介入：
        链接器的目的是将所有目标文件和库文件链接在一起
        它会解析目标之间的文件的交叉引用，哪些文件依赖于哪些文件等
        最终将所有代码整合起来，生成一个单一的最终文件outputfile

但是，如果一个项目很大，比如有几十上百个cpp文件时，使用这个命令就会很麻烦
因为每一次编译都需要把所有文件都编译一遍，包括那些没有修改过的文件，
然后再把它们链接在一起，所以对于大型文件，通常有一个更分离式的方法：
    g++ -c file.cpp
这个命令只包含了之前的命令的第一个步骤，使用它可以将所有.cpp文件都单独编译出来，
并在修改某一个文件以后只单独编译那一个文件，然后对已经编译好的文件直接进行链接：
    g++ file1.o file2.o file3.o ... -o outputfile
这样就能大幅节省编译时间，但是对于大型工程来说，这样还是难以管理文件，因为往往会忘记
哪些文件有被更新过，哪些文件没有更新过，尤其是多人合作的代码项目

但Make工具能够自主化的完成对被修改的文件和以来被修改文件的编译，以及跟踪文件
之间的依赖关系

make的原理：
make文件读取一个名为makefile(构建文件)的文件，其中包含建构"目标Target"的规则Rules
如果目标依赖于某个文件，那么make会先构建该文件，如果该文件又依赖于其他文件，那么
make会先构建其他文件，以此类推，只有当目标比该文件更旧(依赖的文件被修改了)的情况下
make才会重新构建依赖文件

make文件的规则——————————————————————————————————————————————————

规则告诉make在什么时候构建文件，构建什么文件：
规则必须有一个 依赖行Dependency line，并且可能有一个 动作行action line 或命令行Command line
只有当 依赖行 过期时，make才会执行 动作行 或 命令行 的命令

示例——————————————————————————————————
hello.o: hello.cpp
    g++ -c hello.cpp
这个规则代表：hello.o是一个 模块，它依赖于 hello.cpp 作为 源代码
只有当 源代码hello.cpp 的最后修改日期 比 模块hello.o 还要新的时候
make 才会执行 动作行： g++ -c hello.cpp，即重新编译hello.cpp

    依赖行————————————————————————————
    依赖行指定了一个 目标Target 和该目标的所有 先决条件prerequisites
    target: prereq1 prereq2 prereq3...
    make的过程是 递归，在完成构建前，它会依次检查所有项，确保它们不会过期

    命令行————————————————————————————
    命令行接在依赖行以后，命令行必须以TAB开头，任何Shell中运行的命令
    都可以放在命令行
    命令行中可以使用特殊变量：
        $@代表当前目标的名称
        $^代表当前目标的所有依赖项
        $<代表当前目标的第一个依赖项

完整Makefile示例——————————————————————
Project1 : PA1.o imdb.o         代表最终文件Project1依赖于PA1.o和imdb.o
    g++ imdb.o PA1.o -o $@          如果PA1.o或者imdb.o更新，那么重新链接这两个文件成最终文件
PA1.o : PA1.cpp                 代表PA1.o依赖于PA1.cpp
    g++ -c $^ -o $@                 如果PA1.cpp更新，那么单独编译它成PA1.o，且不启动链接器
imdb.o : imdb.cpp imdb.h        代表imdb.o依赖于imdb.cpp和imdb.h
    g++ -c $< -o $@                 如果imdb.cpp或者imdb.h更新，那么单独编译imdb.cpp且不启动链接器
clean :                         Clean是一个 伪目标，它不代表任何实际生成的文件名，没有依赖项
    rm -i *.o Project1              在执行make clean命令时会执行这个操作，会删除任何.o结尾的文件和Project1


