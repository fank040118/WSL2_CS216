正则表达式Regular Expression-------------------------------------
正则表达式 是一种定义字符串类的模式，vim和grep可以使用正则表达式

选择Alternation 使用 | 描述多个选项之间进行选择，比如 a|b|c
分组Grouping 使用()描述操作符的作用域和优先级，比如 (c|s)at
量化Quantification 使用? * +定义前面的表达式出现的次数：
    ？表示出现0或1次
    * 表示出现0或多次
    + 表示出现1或多次(至少一次)

. 匹配任意单个字符
.* 匹配任意字符串
[a-zA-Z] 匹配任何字母字符(大小写均可)
[0-9] 匹配范围内的任何单个数字
[^0-9] 匹配任何非数字字符(^在方括号内表示否定)

grep命令配合正则表达式
    在使用grep时，? + | ( ) 等符号会失去特殊含义，需要使用反斜杠\转义
特殊符号：
    ^：匹配行的开头
    $：匹配行的结尾
    \< \>：匹配单词开头或结尾

例如：
&grep "\<com.*ter\>" /路径 用于查找指定文件中所有以com开头，ter结尾的单词
&grep "^computer" /路径 用于查找computer开头的单词所在的行
&grep "\(c\|e\)at$" /路径 用于查找cat或eat结尾的单词所在的行

ls -l - | grep "^d" 使用ls -l列出详细信息，再传给grep，查找以d开头的行
