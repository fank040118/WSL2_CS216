Shell Script——————————————————————————————————————————————————
平常在终端中输入的命令，比如：
cd /CS216/Labs
mkdir Lab1
touch Lab1/file.txt
这些命令可以写进一个 .sh 文件里，它会作为一个脚本，自动依次进行里面的命令

shell提示符下输入的任何命令都可包含在脚本中，例如：
    实用程序Utility
    已编译的程序Compiled Program
    另一个shell脚本
    流程控制命令Control flow commands
shell脚本名不能和Unix命令冲突

运行shell脚本————————————————————————————————————————————————
运行shell脚本有三个步骤：
1：先让文件可执行，给文件添加执行权限
    chmod u+x filename
2：执行文件，使用./运行指定文件
    ./filename
3：shell解释器会逐条执行命令

编写shell脚本————————————————————————————————————————————————
shell脚本的第一行放置特殊字符，告诉系统在执行前检查文件类型，以及使用寿命工具
shell脚本的前两个字符是 !#(shebang或hashbang)，然后跟着应该执行脚本的程序的绝对路径名
示例：
#!/bin/bash
echo "Hello, world!"

Shell参数和变量——————————————————————————————————————————————
Shell变量由字母，数字和下划线组成
    环境变量environment variables用大写
    用户定义变量User defined variables用小写
    关键字Shell变量Keyword shell variables对shell有特殊含义，由启动文件创建和初始化

位置参数Positional parameters：
    允许访问命令行参数
    向函数传递参数

特殊参数Special parameters，例如：
    最后命令的名称
    最近执行命令的状态
    命令行参数的数量

内置Shell环境变量————————————————————————————————————————————
PATH 命令搜索路径search path for commands
PS1 主命令提示符字符串primary command prompt string
SHELL shell的完整路径名 full pathname for the shell
HISTSIZE 命令历史中保存的行数 number of lines kept in the command history
RANDOM 0到2^15 -1之间的随机数

用户定义变量—————————————————————————————————————————————————
定义变量：
    变量名=值
定义变量的等号两侧不能有空格
比如 num=10 或者 name="Anthony Wang"

    引号和变量————————————————
Shell变量不会被引号""而识别为字符串，比如：
    abc=100
这个时候，变量abc被赋值100，如果在后续代码中使用 "abc" 而不是 abc，那么shell也会把它识别为变量abc，
而不是一个字符串"abc"
    即 "$abc" == $abc
双引号的用处是避免空格或空值引起的语法错误

算数扩展——————————————————————————————————————————————————————
shell中的变量运算方式和C++不同，shell是一个以字符串为主的语言，它默认不会做数学运算，比如写：
    number=100
    number=number-1
那么shell会理解成"number先被赋值为100，然后又被赋值为"number-1"这个字符串，而不是99
想要实现 number-- 一样的代码，需要写成：
    number=$((number-1))
这里的两层括号的意义是在括号内执行运算或条件，而 $(()) 代表计算表达式并将数值返回给变量
在双括号中不需要使用 $ 访问变量值，不过如果是位置参数的话就需要使用 $，比如：
    number=$((number + $2)) 代表number = number自己 + 位置参数$2

幂计算使用 **，比如：
    MAX=$((2**8))，即2的8次方


